[atoma_service]
chat_completions_service_urls = { "Infermatic/Llama-3.3-70B-Instruct-FP8-Dynamic" = [
    [
        "http://chat-completions1:8000",
        "vllm1",
    ],
    [
        "http://chat-completions2:8000",
        "vllm2",
    ],
    [
        "http://chat-completions3:8000",
        "vllm3",
    ],
    [
        "http://chat-completions4:8000",
        "vllm4",
    ],
    [
        "http://chat-completions5:8000",
        "vllm5",
    ],
    [
        "http://chat-completions6:8000",
        "vllm6",
    ],
    [
        "http://chat-completions7:8000",
        "vllm7",
    ],
    [
        "http://chat-completions8:8000",
        "vllm8",
    ],
] }
embeddings_service_url = "http://embeddings:80"
image_generations_service_url = "http://image-generations:80"
# List of models to be used by the service, the current value here is just a placeholder, please change it to the models you want to deploy
models               = [ "Infermatic/Llama-3.3-70B-Instruct-FP8-Dynamic" ]
revisions            = [ "main" ]
service_bind_address = "0.0.0.0:3000"

[atoma_sui]
atoma_db                = "0xb2add06b26925f1423c3dd8e7da3887290bfe19e371b816fa92c741538b68000" # Current ATOMA DB object ID for testnet
atoma_package_id        = "0x901203415696585dfffd10483c5e14f63bd2d09590fd0c673d3aae66a91b4b9c" # Current ATOMA package ID for testnet
cursor_path             = "/app/data/cursor.toml"                                              # Path to the Sui events cursor file
http_rpc_node_addr      = "https://fullnode.testnet.sui.io:443"                                # Current RPC node address for testnet
limit                   = 100                                                                  # Some reference value
max_concurrent_requests = 10                                                                   # Some reference value
node_small_ids          = [ 1 ]                                                                # List of node IDs under control of the node wallet
request_timeout         = { secs = 300, nanos = 0 }                                            # Some reference value
sui_config_path         = "/root/.sui/sui_config/client.yaml"                                  # Path to the Sui client configuration file, accessed from the docker container (if this is not the case, pass in the full path, on your host machine which is by default ~/.sui/sui_config/client.yaml)
sui_keystore_path       = "/root/.sui/sui_config/sui.keystore"                                 # Path to the Sui keystore file, accessed from the docker container (if this is not the case, pass in the full path, on your host machine which is by default ~/.sui/sui_config/sui.keystore)
usdc_package_id         = "0xa1ec7fc00a6f40db9693ad1415d0c193ad3906494428cf252621037bd7117e29" # Current USDC package ID for testnet

[atoma_state]
# Path inside the container
# Replace the placeholder values with the ones for your local environment (in the .env file)
database_url = "postgres://<POSTGRES_USER>:<POSTGRES_PASSWORD>@postgres-db:5432/<POSTGRES_DB>"

[atoma_daemon]
# WARN: Do not expose this port to the public internet, as it is used only for internal communication between the Atoma Node and the Atoma Network
service_bind_address = "0.0.0.0:3001"
# Replace the placeholder values with the actual node badge and small ID assigned by the Atoma's smart contract, upon node registration
node_badges = [
    [
        "0x268e6af9502dcdcaf514bb699c880b37fa1e8d339293bc4f331f2dde54180600",
        1,
    ],
] # List of node badges, where each badge is a tuple of (badge_id, small_id), both values are assigned once the node registers itself

[atoma_p2p]
# Interval for sending heartbeat messages to peers (in seconds)
heartbeat_interval = { secs = 30, nanos = 0 }
# Maximum duration a connection can remain idle before closing (in seconds)
idle_connection_timeout = { secs = 60, nanos = 0 }
# Address to listen for incoming QUIC connections (format: "/ip4/x.x.x.x/udp/x")
# Address to listen for incoming QUIC connections (format: "/ip4/x.x.x.x/udp/x")
listen_addrs = [ "/ip4/0.0.0.0/tcp/4001", "/ip4/0.0.0.0/udp/4001/quic-v1" ]
# The list of bootstrap nodes to dial
bootstrap_node_addrs = [ "/ip4/213.130.147.75/tcp/8083", "/ip4/213.130.147.75/udp/8083/quic-v1" ]

# Node's small ID (assigned by Atoma smart contract)
node_small_id = 1
# The HTTP(s) public URL of the node
public_url = "https://<PUBLIC_URL>"
# required, replace this with the country (ISO 3166-1 alpha-2) of the node (https://www.iso.org/obp/ui/#search/code/
country = ""
# List of endpoints serving metrics to collect, in the form of a map of model name to a tuple of (serving_engine, metrics_endpoint)
# (e.g. `"meta-llama/Llama-3.2-3B-Instruct" = ("vllm", "http://chat-completions:8000/metrics")`)
metrics_endpoints = { "Infermatic/Llama-3.3-70B-Instruct-FP8-Dynamic" = [
    "http://chat-completions1:8000/metrics",
    "http://chat-completions2:8000/metrics",
    "http://chat-completions3:8000/metrics",
    "http://chat-completions4:8000/metrics",
    "http://chat-completions5:8000/metrics",
    "http://chat-completions6:8000/metrics",
    "http://chat-completions7:8000/metrics",
    "http://chat-completions8:8000/metrics",
    "vllm",
] }
# The path to the local key
local_key = "/app/data/local_key"
