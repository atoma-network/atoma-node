# Base configurations that are common between environments
x-atoma-p2p-base: &atoma-p2p-base
  build: &atoma-p2p-base-build
    context: .
    dockerfile: Dockerfile
    args: &atoma-p2p-base-build-args
      TRACE_LEVEL: ${TRACE_LEVEL:-info}
  volumes:
    - ${CONFIG_PATH:-./config.toml}:/app/config.toml
    - ./logs:/app/logs
    - sui-config-volume:/root/.sui/sui_config
    - ${SUI_CONFIG_PATH:-~/.sui/sui_config}:/tmp/.sui/sui_config
  env_file:
    - .env
  environment:
    - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  depends_on:
    prometheus:
      condition: service_healthy
    grafana:
      condition: service_healthy
    loki:
      condition: service_healthy
    tempo:
      condition: service_healthy
  networks:
    - atoma-network

services:
  atoma-p2p-tester-local:
    profiles: ["local"]
    <<: *atoma-p2p-base
    image: ghcr.io/atoma-network/atoma-p2p-tester:local-latest
    build:
      <<: *atoma-p2p-base-build
      args:
        <<: *atoma-p2p-base-build-args
        PROFILE: local
    ports:
      - "${ATOMA_P2P_TESTER_SERVICE_PORT:-8080}:8080"

  prometheus:
    image: prom/prometheus:v3.1.0
    platform: ${PLATFORM:-}
    restart: always
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    env_file: .env
    networks:
      - atoma-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:11.5.1
    platform: ${PLATFORM:-}
    restart: always
    ports:
      - "${GRAFANA_PORT:-30001}:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    env_file: .env
    environment:
      - GF_SERVER_ROOT_URL=http://${GRAFANA_DOMAIN}:${GRAFANA_PORT:-30001}/
    networks:
      - atoma-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:2.9.4
    platform: ${PLATFORM:-}
    ports:
      - "3100:3100"
    volumes:
      - ./loki.yaml:/etc/loki/loki.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/loki.yaml
    networks:
      - atoma-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  tempo:
    image: grafana/tempo:2.7.0
    platform: ${PLATFORM:-}
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"
    networks:
      - atoma-network
    user: "0"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.119.0
    platform: ${PLATFORM:-}
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889" # Prometheus exporter
    networks:
      - atoma-network
    depends_on:
      prometheus:
        condition: service_healthy
        required: true
      grafana:
        condition: service_healthy
        required: true
      loki:
        condition: service_healthy
        required: true
      tempo:
        condition: service_healthy
        required: true

volumes:
  sui-config-volume:
  grafana_data:
  prometheus-data:
  loki-data:
  tempo-data:

networks:
  atoma-network:
    driver: bridge
