use crate::serving::validation::{NextTokenChooserParameters, StoppingCriteriaParameters};
use std::time::{Duration, Instant};
use thiserror::Error;
use tracing::{info_span, Span};

/// `Sequence` - A sequence of tokens generated by the LLM
/// that can be parsed by the underlying LLM engine
#[derive(Debug, Clone)]
pub struct Sequence {
    /// Unique identifier for the sequence
    sequence_id: u64,
    /// The text input string
    inputs: String,
    /// The tokenized input ids
    input_token_ids: Vec<u32>,
    /// The arrival time of the request,
    /// into the `LlmService`
    arrival_time: Instant,
    /// Return the full text, that is it
    /// prepends the input string to the generated
    /// output text
    return_full_text: bool,
    /// The LLM inference generation parameters
    parameters: NextTokenChooserParameters,
    /// The stopping parameters for the LLM inference
    stopping_parameters: StoppingCriteriaParameters,
    /// Tracing span
    span: Span,
}

impl Sequence {
    /// Constructor
    pub fn new(
        sequence_id: u64,
        inputs: String,
        input_token_ids: Vec<u32>,
        arrival_time: Instant,
        return_full_text: bool,
        parameters: NextTokenChooserParameters,
        stopping_parameters: StoppingCriteriaParameters,
    ) -> Self {
        Self {
            sequence_id,
            inputs,
            input_token_ids,
            arrival_time,
            return_full_text,
            parameters,
            stopping_parameters,
            span: info_span!("sequence"),
        }
    }
}

/// Request metrics
#[derive(Clone, Debug)]
pub struct RequestMetrics {
    /// Time of request arrival to service
    pub arrival_time: Instant,
    /// Time to which last token was generated
    pub last_token_time: Instant,
    /// Time that request was first scheduled
    pub first_scheduled_time: Option<Instant>,
    /// Time to which first token was generated
    pub first_token_time: Option<Instant>,
    /// Duration of request in 'waiting' queue
    pub time_in_queue: Option<Duration>,
    /// Time to which generation finished for request
    pub finished_time: Option<Instant>,
}

#[derive(Debug, Error)]
pub enum SequenceError {}
